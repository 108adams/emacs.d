#+TITLE: Emacs Configuration
#+AUTHOR: Adam Kucharczyk
#+EMAIL: 108adams@gmail.com
#+OPTIONS: toc:4 h:4

* Introduction

  This file is based on [[https://raw.githubusercontent.com/mwfogleman/.emacs.d/master/michael.org][Miachael's]] and [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry's]] literate programming-based config
  files.

 - TODO [[*=ag=][=ag=]] setup on a machine that supports it
 - TODO [[*Coq][Coq]] - grok once again


* init.el contents

  As text: should not to be interpreted here, move it to the actual init.el

  ;;; init.el ---  Main init.el file for Emacs

  ;;; Commentary:
  ;; This file allows Emacs to initialize my customizations
  ;; in Emacs Lisp embedded in *one* literate Org-mode file.

  ;;; Code:
  ;; Configure package.el to include MELPA.
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)

  ;; Ensure that use-package is installed.
  ;;
  ;; If use-package isn't already installed, it's extremely likely that this is a
  ;; fresh installation! So we'll want to update the package repository and
  ;; install use-package before loading the literate configuration.
  (when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Always compile packages, and use the newest version available.
  (use-package auto-compile
  :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)

  ;; start machines for literate programming
  (use-package org)
  (org-babel-load-file "~/.emacs.d/configuration.org")

  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(package-selected-packages
  (quote
  (counsel deft yasnippet yaml-mode which-key wgrep web-mode use-package undo-tree shut-up rainbow-delimiters paredit paradox org markdown-mode+ magit loop json-mode js2-mode graphviz-dot-mode gnuplot flycheck-package dired-hide-dotfiles diff-hl company auto-compile ag)))
  '(undo-tree-visualizer-diff t))
  (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )


  ;;; init.el ends here

* Use sensible-defaults.el

  Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

  #+BEGIN_SRC emacs-lisp
    (load-file "~/.emacs.d/site-lisp/sensible-defaults.el")
    (sensible-defaults/use-all-settings)
    (sensible-defaults/use-all-keybindings)
    (sensible-defaults/backup-to-temp-directory)
  #+END_SRC

* Set personal information
** Who am I? Where am I?

   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/private.el")
   #+END_SRC

* UI preferences
** Line numbers and history

   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (savehist-mode 1)
   #+END_SRC

** Tweak window chrome

   I don't usually use the menu or scroll bar, and they take up useful space.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     ;; (scroll-bar-mode -1)
   #+END_SRC

   There's a tiny scroll bar that appears in the minibuffer window. This disables
   that:

   #+BEGIN_SRC emacs-lisp
     (set-window-scroll-bars (minibuffer-window) nil nil)
   #+END_SRC

   The default frame title isn't useful. This binds it to the name of the current
   project:

   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format '((:eval (projectile-project-name))))
   #+END_SRC

** Use fancy lambdas

   Why not?

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode t)
   #+END_SRC

** Disable visual bell

   =sensible-defaults= replaces the audible bell with a visual one, but I really
   don't even want that (and my Emacs/Mac pair renders it poorly). This disables
   the bell altogether.

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Scroll conservatively

   When point goes outside the window, Emacs usually recenters the buffer point.
   I'm not crazy about that. This changes scrolling behavior to only scroll as far
   as point goes.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

* Project management

  I use a few packages in virtually every programming or writing environment to
  manage the project, handle auto-completion, search for terms, and deal with
  version control. That's all in here.

** =ag=

   Set up =ag= for displaying search results.

   #+BEGIN_SRC emacs-lisp
     ;;  (use-package ag)
   #+END_SRC

** =company=
   Company is a text completion framework for Emacs. The name stands for "complete anything". 
   It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
   
   Use =company-mode= everywhere.

   #+BEGIN_SRC emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

   Use =M-/= for completion.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-/") 'company-complete-common)
   #+END_SRC

** =flycheck=
   Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck)
     (add-hook 'after-init-hook #'global-flycheck-mode)

     ;; customize flycheck temp file prefix
     (setq-default flycheck-temp-prefix ".flycheck")
   #+END_SRC

** =magit=

   I use =magit= to handle version control. It's lovely, but I tweak a few things:

   - I bring up the status menu with =C-x g=.
   - The default behavior of =magit= is to ask before pushing. I haven't had any
     problems with accidentally pushing, so I'd rather not confirm that every
     time.
   - use Ivy in branch selection
   - Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
     beyond 50 characters.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind
       ("C-x g" . magit-status)

       :config
       (setq magit-push-always-verify nil)
       (setq magit-completing-read-function 'ivy-completing-read))
     (setq git-commit-summary-max-length 50)
   #+END_SRC

** =projectile=

   I use =ivy= as my completion system.

   When I visit a project with =projectile-switch-project=, the default action is
   to search for a file in that project. I'd rather just open up the top-level
   directory of the project in =dired= and find (or create) new files from there.

   I'd like to /always/ be able to recursively fuzzy-search for files, not just
   when I'm in a Projectile-defined project. I use the current directory as a
   project root (if I'm not in a "real" project).

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :bind
       ("C-c p" . 'projectile-command-map)

       :config
       (setq projectile-completion-system 'ivy)
       (setq projectile-switch-project-action 'projectile-dired)
       (setq projectile-require-project-root nil))
   #+END_SRC

** =undo-tree=

   I like tree-based undo management. I only rarely need it, but when I do, oh boy.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree)
   #+END_SRC

* Programming environments

  I like shallow indentation, but tabs are displayed as 8 characters by default.
  This reduces that.

  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
  #+END_SRC

  Treating terms in CamelCase symbols as separate words makes editing a little
  easier for me, so I like to use =subword-mode= everywhere.

  #+BEGIN_SRC emacs-lisp
    (use-package subword
      :config (global-subword-mode 1))
  #+END_SRC

  Compilation output goes to the =*compilation*= buffer. I rarely have that window
  selected, so the compilation output disappears past the bottom of the window.
  This automatically scrolls the compilation window so I can always see the
  output.

  #+BEGIN_SRC emacs-lisp
    (setq compilation-scroll-output t)
  #+END_SRC

** =web-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package web-mode)
   #+END_SRC

   If I'm in =web-mode=, I'd like to:

   - Color color-related words with =rainbow-mode=.
   - Still be able to run RSpec tests from =web-mode= buffers.
   - Indent everything with 2 spaces.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'web-mode-hook
               (lambda ()
                 (rainbow-mode)
;;                 (rspec-mode)
                 (setq web-mode-markup-indent-offset 2)))
   #+END_SRC
   
** JavaScript and ESLint

   [[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html][JS setup source]]

   Use js2 mode for full JS support.

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode)
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

     ;; Better imenu
     (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

     ;; use web-mode for .jsx files
     (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
   #+END_SRC

   Disable jshint since we prefer eslint checking

   #+BEGIN_SRC emacs-lisp
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint)))

     ;; use eslint with web-mode for jsx files
     (flycheck-add-mode 'javascript-eslint 'web-mode)

     ;; customize flycheck temp file prefix
     (setq-default flycheck-temp-prefix ".flycheck")
   #+END_SRC

   Use local eslint from node_modules before global
   http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable

   #+BEGIN_SRC emacs-lisp
     (defun my/use-eslint-from-node-modules ()
       (let* ((root (locate-dominating-file
                     (or (buffer-file-name) default-directory)
                     "node_modules"))
              (eslint (and root (expand-file-name "node_modules/eslint/bin/eslint.js" root))))
         (when (and eslint (file-executable-p eslint))
           (setq-local flycheck-javascript-eslint-executable eslint))))

     (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
   #+END_SRC

** Lisps

   I like to use =paredit= in Lisp modes to balance parentheses (and more!).

   #+BEGIN_SRC emacs-lisp
     (use-package paredit)
   #+END_SRC

   =rainbow-delimiters= is convenient for coloring matching parentheses.

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters)
   #+END_SRC

   All the lisps have some shared features, so we want to do the same things for
   all of them. That includes using =paredit=, =rainbow-delimiters=, and
   highlighting the whole expression when point is on a parenthesis.

   #+BEGIN_SRC emacs-lisp
     (setq lispy-mode-hooks
           '(clojure-mode-hook
             emacs-lisp-mode-hook
             lisp-mode-hook
             scheme-mode-hook))

     (dolist (hook lispy-mode-hooks)
       (add-hook hook (lambda ()
                        (setq show-paren-style 'expression)
                        (paredit-mode)
                        (rainbow-delimiters-mode))))
   #+END_SRC

   If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
   documentation.

   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
       :config
       (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
   #+END_SRC

   I also like using =flycheck-package= to ensure that my Elisp packages are
   correctly formatted.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-package)

     (eval-after-load 'flycheck
       '(flycheck-package-setup))
   #+END_SRC

** =sh=

   Indent with 2 spaces.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'sh-mode-hook
               (lambda ()
                 (setq sh-basic-offset 2
                       sh-indentation 2)))
   #+END_SRC

** Python

   Basic setup for org blocks
   [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Org Mode docs on Python]]

   #+BEGIN_SRC emacs-lisp
     (use-package ob-ipython)
   #+END_SRC

* =org-mode=
** Display preferences

   Use syntax highlighting in source blocks while editing.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

   Make TAB act as if it were issued in a buffer of the language's major mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   When editing a code snippet, use the current window rather than popping open a
   new one (which shows the same information).

   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC

** Structure templates

   Quickly insert a block of elisp or python:

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
                  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
     (add-to-list 'org-structure-template-alist
                  '("p" "#+begin_src python\n?\n#+end_src"))
   #+END_SRC

** Task and org-capture management

   Store my org files in =~/org=, maintain an inbox in Dropbox, define
   the location of an index file (my main todo list), and archive finished tasks in
   =~/org/archive.org=.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/org")

     (defun org-file-path (filename)
       "Return the absolute address of an org file, given its relative name."
       (concat (file-name-as-directory org-directory) filename))

     (setq org-inbox-file (org-file-path "inbox.org"))
     (setq org-index-file (org-file-path "index.org"))
     (setq org-archive-location
           (concat (org-file-path "archive.org") "::* From %s"))
   #+END_SRC

   I use [[http://agiletortoise.com/drafts/][Drafts]] to create new tasks, format them according to a template, and
   append them to an "inbox.org" file in my Dropbox. This function lets me import
   them easily from that inbox file to my index.

   #+BEGIN_SRC emacs-lisp
     (defun hrs/copy-tasks-from-inbox ()
       (when (file-exists-p org-inbox-file)
         (save-excursion
           (find-file org-index-file)
           (goto-char (point-max))
           (insert-file-contents org-inbox-file)
           (delete-file org-inbox-file))))
   #+END_SRC

   I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from there.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (list org-index-file))
   #+END_SRC

   Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
   place in the archive.

   #+BEGIN_SRC emacs-lisp
     (defun hrs/mark-done-and-archive ()
       "Mark the state of an org-mode item as DONE and archive it."
       (interactive)
       (org-todo 'done)
       (org-archive-subtree))

     (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
   #+END_SRC

   Record the time that a todo was archived.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
   #+END_SRC

**** Capturing tasks

     Define a few common tasks as capture templates. Specifically, I frequently:

     - Record ideas for future blog posts in =~/org/blog-ideas.org=,
     - Maintain a todo list in =~/org/index.org=.
     - Convert emails into todos to maintain an empty inbox.

     #+BEGIN_SRC emacs-lisp
       (setq org-capture-templates
             '(("b" "Blog idea"
                entry
                (file "~/org/blog-ideas.org")
                "* %?\n")

               ("e" "Email" entry
                (file+headline org-index-file "Inbox")
                "* TODO %?\n\n%a\n\n")

               ("f" "Finished book"
                table-line (file "~/org/books-read.org")
                "| %^{Title} | %^{Author} | %u |")

               ("r" "Reading"
                checkitem
                (file (org-file-path "to-read.org")))

               ("t" "Todo"
                entry
                (file+headline org-index-file "Inbox")
                "* TODO %?\n")))
     #+END_SRC

     Refiling according to the document's hierarchy.

     #+BEGIN_SRC emacs-lisp
       (setq org-refile-use-outline-path t)
       (setq org-outline-path-complete-in-steps nil)
     #+END_SRC

**** Keybindings

     Bind a few handy keys.

     #+BEGIN_SRC emacs-lisp
       (define-key global-map "\C-cl" 'org-store-link)
       (define-key global-map "\C-ca" 'org-agenda)
       (define-key global-map "\C-cc" 'org-capture)
       (define-key global-map "\C-cb" 'org-switchb)
     #+END_SRC

     Hit =C-c i= to quickly open up my todo list.

     #+BEGIN_SRC emacs-lisp
       (defun hrs/open-index-file ()
         "Open the master org TODO list."
         (interactive)
         (hrs/copy-tasks-from-inbox)
         (find-file org-index-file)
         (flycheck-mode -1)
         (end-of-buffer))

       (global-set-key (kbd "C-c i") 'hrs/open-index-file)
     #+END_SRC

     Hit =M-n= to quickly open up a capture template for a new todo.

     #+BEGIN_SRC emacs-lisp
       (defun org-capture-todo ()
         (interactive)
         (org-capture :keys "t"))

       (global-set-key (kbd "M-n") 'org-capture-todo)
       (add-hook 'gfm-mode-hook
                 (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
       (add-hook 'haskell-mode-hook
                 (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
     #+END_SRC

** Exporting

   Allow export to markdown and beamer (for presentations).

   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
     (require 'ox-beamer)
   #+END_SRC

   Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

   #+BEGIN_SRC emacs-lisp
     (use-package gnuplot)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (dot . t)
        (gnuplot . t)))
   #+END_SRC

   Don't ask before evaluating code blocks.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   Associate the "dot" language with the =graphviz-dot= major mode.

   #+BEGIN_SRC emacs-lisp
     (use-package graphviz-dot-mode)
     (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
   #+END_SRC

   Translate regular ol' straight quotes to typographically-correct curly quotes
   when exporting.

   #+BEGIN_SRC emacs-lisp
     (setq org-export-with-smart-quotes t)
   #+END_SRC

**** Exporting to HTML

     Don't include a footer with my contact and publishing information at the bottom
     of every exported HTML document.

     #+BEGIN_SRC emacs-lisp
       (setq org-html-postamble nil)
     #+END_SRC

**** Exporting to PDF

     I want to produce PDFs with syntax highlighting in the code. The best way to do
     that seems to be with the =minted= package, but that package shells out to
     =pygments= to do the actual work. =pdflatex= usually disallows shell commands;
     this enables that.

     #+BEGIN_SRC emacs-lisp
       (setq org-latex-pdf-process
             '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     #+END_SRC

     Include the =minted= package in all of my LaTeX exports.

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'org-latex-packages-alist '("" "minted"))
       (setq org-latex-listings 'minted)
     #+END_SRC

** TeX configuration

   I rarely write LaTeX directly any more, but I often export through it with
   org-mode, so I'm keeping them together.

   Automatically parse the file after loading it.

   #+BEGIN_SRC emacs-lisp
     (setq TeX-parse-self t)
   #+END_SRC

   Always use =pdflatex= when compiling LaTeX documents. I don't really have any
   use for DVIs.

   #+BEGIN_SRC emacs-lisp
     (setq TeX-PDF-mode t)
   #+END_SRC

   Open compiled PDFs in =zathura= instead of in the editor.

   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'org-mode-hook
     ;;       '(lambda ()
     ;;          (delete '("\\.pdf\\'" . default) org-file-apps)
     ;;          (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))))
   #+END_SRC

   Enable a minor mode for dealing with math (it adds a few useful keybindings),
   and always treat the current file as the "main" file. That's intentional, since
   I'm usually actually in an org document.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook
               (lambda ()
                 (LaTeX-math-mode)
                 (setq TeX-master t)))
   #+END_SRC

* Writing prose
** Editing with Markdown

   Because I can't always use =org=.

   - Associate =.md= files with GitHub-flavored Markdown.
   - Use =pandoc= to render the results.
   - Leave the code block font unchanged.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands gfm-mode

       :mode (("\\.md$" . gfm-mode))

       :config
       (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
       (custom-set-faces
        '(markdown-code-face ((t nil)))))
   #+END_SRC

** Wrap paragraphs automatically

   =AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
   a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
   Markdown, or Org.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'auto-fill-mode)
     (add-hook 'gfm-mode-hook 'auto-fill-mode)
     (add-hook 'org-mode-hook 'auto-fill-mode)
   #+END_SRC

** Cycle between spacing alternatives

   Successive calls to =cycle-spacing= rotate between changing the whitespace
   around point to:

   - A single space,
   - No spaces, or
   - The original spacing.

   Binding this to =M-SPC= is strictly better than the original binding of
   =just-one-space=.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-SPC") 'cycle-spacing)
   #+END_SRC

** Linting prose

   I use [[http://proselint.com/][proselint]] to check my prose for common errors. This creates a flycheck
   checker that runs proselint in texty buffers and displays my errors.

   #+BEGIN_SRC emacs-lisp
     (require 'flycheck)

     (flycheck-define-checker proselint
       "A linter for prose."
       :command ("proselint" source-inplace)
       :error-patterns
       ((warning line-start (file-name) ":" line ":" column ": "
                 (id (one-or-more (not (any " "))))
                 (message (one-or-more not-newline)
                          (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                 line-end))
       :modes (text-mode markdown-mode gfm-mode org-mode))

     (add-to-list 'flycheck-checkers 'proselint)
   #+END_SRC

   Use flycheck in the appropriate buffers:

   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook #'flycheck-mode)
     (add-hook 'gfm-mode-hook #'flycheck-mode)
     (add-hook 'text-mode-hook #'flycheck-mode)
     (add-hook 'org-mode-hook #'flycheck-mode)
   #+END_SRC

** Enable region case modification

   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
   #+END_SRC

** Quickly explore my "notes" directory with =deft=

   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :bind ("C-c n" . deft)
       :commands (deft)
       :init (setq deft-directory "~/notes"
                   deft-text-mode 'org-mode
                   deft-extensions '("org")
                   ;; deft-use-filename-as-title t
                   deft-recursive t
                   deft-new-file-format "%Y-%m-%dT%H%M"))
   #+END_SRC

* =dired=

  Hide dotfiles by default, but toggle their visibility with =.=.

  #+BEGIN_SRC emacs-lisp
    (use-package dired-hide-dotfiles
      :config
      (dired-hide-dotfiles-mode)
      (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
  #+END_SRC

  Open media with the appropriate programs.

  #+BEGIN_SRC emacs-lisp
    ;; (use-package dired-open
    ;;   :config
    ;;   (setq dired-open-extensions
    ;;         '(("pdf" . "zathura")
    ;;           ("mkv" . "vlc")
    ;;           ("mp3" . "vlc")
    ;;           ("mp4" . "vlc")
    ;;           ("avi" . "vlc"))))
  #+END_SRC

  Mac dired tweak:

  #+BEGIN_SRC emacs-lisp
;;    (setq-default dired-use-ls-dired nil)
  #+END_SRC

  These are the switches that get passed to =ls= when =dired= gets a list of
  files. We're using:

  - =l=: Use the long listing format.
  - =h=: Use human-readable sizes.
  - =v=: Sort numbers naturally.
  - =A=: Almost all. Doesn't include "=.=" or "=..=".

  #+BEGIN_SRC emacs-lisp
    (setq-default dired-listing-switches "-lhvA")
  #+END_SRC

  Kill buffers of files/directories that are deleted in =dired=.

  #+BEGIN_SRC emacs-lisp
    (setq dired-clean-up-buffers-too t)
  #+END_SRC

  Always copy directories recursively instead of asking every time.

  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-copies 'always)
  #+END_SRC

  Ask before recursively /deleting/ a directory, though.

  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-deletes 'top)
  #+END_SRC

  Open a file with an external program (that is, through =xdg-open=) by hitting
  =C-c C-o=.

  #+BEGIN_SRC emacs-lisp
    (defun dired-xdg-open ()
      "In dired, open the file named on this line."
      (interactive)
      (let* ((file (dired-get-filename nil t)))
        (call-process "xdg-open" nil 0 nil file)))

    (define-key dired-mode-map (kbd "C-c C-o") 'dired-xdg-open)
  #+END_SRC

* Editing settings
** Save my location within a file

   Using =save-place-mode= saves the location of point for every file I visit. If I
   close the file or close the editor, then later re-open it, point will be at the
   last place I visited.

   #+BEGIN_SRC emacs-lisp
     (save-place-mode t)
   #+END_SRC

** Always indent with spaces

   Never use tabs. Tabs are the devil’s whitespace.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Install and configure =which-key=

   =which-key= displays the possible completions for a long keybinding. That's
   really helpful for some modes (like =projectile=, for example).

   #+BEGIN_SRC emacs-lisp
     ;; (use-package which-key
     ;;   :config (which-key-mode))
   #+END_SRC

** Configure =yasnippet=

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet)
   #+END_SRC

   I keep my snippets in =~/.emacs.d/snippets/text-mode=, and I always want =yasnippet=
   enabled.

   #+BEGIN_SRC emacs-lisp
     (setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
     (yas-global-mode 1)
   #+END_SRC

   I /don’t/ want =yas= to automatically indent the snippets it inserts. Sometimes
   this looks pretty bad (when indenting org-mode, for example, or trying to guess
   at the correct indentation for Python).

   #+BEGIN_SRC emacs-lisp
     (setq yas/indent-line nil)
   #+END_SRC

** Configure =ivy= and =counsel=

   I use =ivy= and =counsel= as my completion framework.
   [[https://github.com/abo-abo/swiper][Documentation]]

   This configuration:

   - Uses =counsel-M-x= for command completion,
   - Replaces =isearch= with =swiper=,
   - Uses =smex= to maintain history,
   - Enables fuzzy matching everywhere except swiper (where it's thoroughly
     unhelpful), and
   - Includes recent files in the switch buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :bind
       ("M-x" . 'counsel-M-x)
       ("C-s" . 'swiper)

       :config
       (use-package flx)
       (use-package smex)

       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((swiper . ivy--regex-plus)
               (t . ivy--regex-fuzzy))))
   #+END_SRC

** Switch and rebalance windows when splitting

   When splitting a window, I invariably want to switch to the new window. This
   makes that automatic.

   #+BEGIN_SRC emacs-lisp
     (defun hrs/split-window-below-and-switch ()
       "Split the window horizontally, then switch to the new pane."
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))

     (defun hrs/split-window-right-and-switch ()
       "Split the window vertically, then switch to the new pane."
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))

     (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
     (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
   #+END_SRC

** Mass editing of =grep= results

   I like the idea of mass editing =grep= results the same way I can edit filenames
   in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
   results and =C-c C-c= to stop, just like in =dired=.

   #+BEGIN_SRC emacs-lisp
     (use-package wgrep)

     (eval-after-load 'grep
       '(define-key grep-mode-map
          (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

     (eval-after-load 'wgrep
       '(define-key grep-mode-map
          (kbd "C-c C-c") 'wgrep-finish-edit))

     (setq wgrep-auto-save-buffer t)
   #+END_SRC

** Use projectile everywhere

   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)
   #+END_SRC

* Set custom keybindings

  Switch to the other buffer

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
  #+END_SRC

  Kill current buffer with `C-x k` as default, without prompting.

  #+BEGIN_SRC emacs-lisp
    (defun bjm/kill-this-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer)))

    (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
  #+END_SRC

